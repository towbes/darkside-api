<Application
    x:Class="DarksideGUI.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:DarksideGUI"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    StartupUri="MainWindow.xaml">
    <Application.Resources>


        <GradientStopCollection x:Key="MyGlassGradientStopsResource">
            <GradientStop Offset="0.2" Color="WhiteSmoke" />
            <GradientStop Offset="0.4" Color="Transparent" />
            <GradientStop Offset="0.5" Color="WhiteSmoke" />
            <GradientStop Offset="0.75" Color="Transparent" />
            <GradientStop Offset="0.9" Color="WhiteSmoke" />
            <GradientStop Offset="1" Color="Transparent" />
        </GradientStopCollection>
        <LinearGradientBrush x:Key="MyGlassBrushResource" GradientStops="{StaticResource MyGlassGradientStopsResource}" Opacity="0.75" StartPoint="0,0" EndPoint="1,1" />
        <LinearGradientBrush x:Key="GrayBlueGradientBrush" StartPoint="0,0" EndPoint="1,1">
            <GradientStop Offset="0" Color="DarkGray" />
            <GradientStop Offset="0.5" Color="#CCCCFF" />
            <GradientStop Offset="1" Color="DarkGray" />
        </LinearGradientBrush>
        <Style TargetType="{x:Type Button}">
            <Setter Property="Background" Value="{StaticResource GrayBlueGradientBrush}" />
            <Setter Property="Width" Value="80" />
            <Setter Property="Margin" Value="10" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            ClipToBounds="True">

                            <!--  Outer Rectangle with rounded corners.  -->
                            <Rectangle
                                x:Name="outerRectangle"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Fill="Transparent"
                                RadiusX="20"
                                RadiusY="20"
                                Stroke="{TemplateBinding Background}"
                                StrokeThickness="5" />

                            <!--  Inner Rectangle with rounded corners.  -->
                            <Rectangle
                                x:Name="innerRectangle"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Fill="{TemplateBinding Background}"
                                RadiusX="20"
                                RadiusY="20"
                                Stroke="Transparent"
                                StrokeThickness="20" />

                            <!--  Glass Rectangle  -->
                            <Rectangle
                                x:Name="glassCube"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Fill="{StaticResource MyGlassBrushResource}"
                                Opacity="0"
                                RadiusX="10"
                                RadiusY="10"
                                RenderTransformOrigin="0.5,0.5"
                                StrokeThickness="2">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0.0" Color="LightBlue" />
                                            <GradientStop Offset="1.0" Color="Gray" />
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                                <!--
                                    These transforms have no effect as they are declared here.
                                    The reason the transforms are included is to be targets
                                    for animation (see later).
                                -->
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <RotateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                                <!--  A BevelBitmapEffect is applied to give the button a "Beveled" look.  -->
                                <Rectangle.BitmapEffect>
                                    <BevelBitmapEffect />
                                </Rectangle.BitmapEffect>
                            </Rectangle>

                            <!--  Present Text of the button.  -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter
                                    x:Name="myContentPresenter"
                                    Margin="20"
                                    Content="{TemplateBinding Content}"
                                    TextBlock.Foreground="Black" />
                            </DockPanel>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!--  Set properties when mouse pointer is over the button.  -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <!--  Below are three property settings that occur when the           condition is met (user mouses over button).  -->
                                <!--  Change the color of the outer rectangle when user           mouses over it.  -->
                                <Setter TargetName="outerRectangle" Property="Rectangle.Stroke" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                <!--  Sets the glass opacity to 1, therefore, the           glass "appears" when user mouses over it.  -->
                                <Setter TargetName="glassCube" Property="Rectangle.Opacity" Value="1" />
                                <!--  Makes the text slightly blurry as though you           were looking at it through blurry glass.  -->
                                <Setter TargetName="myContentPresenter" Property="ContentPresenter.BitmapEffect">
                                    <Setter.Value>
                                        <BlurBitmapEffect Radius="1" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <!--  Set properties when button has focus.  -->
                            <Trigger Property="IsFocused" Value="true">
                                <Setter TargetName="glassCube" Property="Rectangle.Opacity" Value="1" />
                                <Setter TargetName="outerRectangle" Property="Rectangle.Stroke" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                <Setter TargetName="glassCube" Property="Rectangle.Opacity" Value="1" />
                            </Trigger>

                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Application.Resources>
</Application>
